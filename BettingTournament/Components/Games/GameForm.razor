@using BettingTournament.Core
@using BettingTournament.Core.Extensions
@using BettingTournament.Core.Models
<MudContainer>
    <MudContainer Class="d-inline-flex gap-5">
        <MudTextField @bind-Value="Game.HomeTeam" Label="Home Team" />
        <MudText Class="align-self-end">:</MudText>
        <MudTextField @bind-Value="Game.AwayTeam" Label="Away Team" />
    </MudContainer>
    <MudContainer Class="pa-15">
        <MudDatePicker Date="@Game.DateTimeUTC" FixYear="2024" DateChanged="DateChanged" Label="Game Date" />
        <MudTimePicker Time="@Game.DateTimeUTC.FromUTCToPolishTimeSpan()" TimeChanged="TimeChanged" Label="Game Time" />
    </MudContainer>
</MudContainer>

@code {
    [Parameter]
    public Game Game { get; set; } = default!;

    [Parameter]
    public EventCallback<Game> GameChanged { get; set; }

    private async Task DateChanged(DateTime? dtNull)
    {
        if (dtNull.HasValue)
        {
            var dt = dtNull.Value;
            var oldDt = Game.DateTimeUTC;
            Game.DateTimeUTC = new DateTime(dt.Year, dt.Month, dt.Day, oldDt.Hour, oldDt.Minute, oldDt.Second);
            await GameChanged.InvokeAsync(Game);
        }
    }

    private async Task TimeChanged(TimeSpan? tsNull)
    {
        if (tsNull.HasValue)
        {
            var ts = tsNull.Value;
            var oldDt = Game.DateTimeUTC;
            // TODO hardcoded UTC+2 !
            Game.DateTimeUTC = new DateTime(oldDt.Year, oldDt.Month, oldDt.Day, ts.Hours - 2, ts.Minutes, ts.Seconds);
            await GameChanged.InvokeAsync(Game);
        }
    }
}
