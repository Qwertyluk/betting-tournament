@    using BettingTournament.Core
@    using BettingTournament.Core.Models
<MudContainer>
    <MudContainer Class="d-inline-flex gap-5">
        <MudTextField @bind-Value="Game.HomeTeam" Label="Druzyna A" />
        <MudText Class="align-self-end">:</MudText>
        <MudTextField @bind-Value="Game.AwayTeam" Label="Druzyna B" />
    </MudContainer>
    <MudContainer Class="pa-15">
        <MudDatePicker Date="@Game.DateTimeUTC" FixYear="2024" DateChanged="DateChanged" Label="Data" />
        <MudTimePicker @bind-Time="TimeSpan" Editable="true" Label="Godzina" />
    </MudContainer>
</MudContainer>

@code {
    private TimeSpan? _timeSpan;

    [Parameter]
    public ActiveGame Game { get; set; } = default!;

    [Parameter]
    public EventCallback<ActiveGame> GameChanged { get; set; }

    private TimeSpan? TimeSpan
    {
        get => _timeSpan;
        set
        {
            _timeSpan = value;
            if (_timeSpan.HasValue)
            {
                var ts = _timeSpan.Value;
                var oldGame = Game.DateTimeUTC;
                Game.DateTimeUTC = new DateTime(oldGame.Year, oldGame.Month, oldGame.Day, ts.Hours, ts.Minutes, ts.Seconds);
                Game.DateTimeUTC = Game.DateTimeUTC - new TimeSpan(2, 0, 0);    // CEST = UTC + 2
                GameChanged.InvokeAsync(Game);
            }
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        var dateTime = Game.DateTimeCEST;
        _timeSpan = new TimeSpan(dateTime.Hour, dateTime.Minute, dateTime.Second);
    }

    private async Task DateChanged(DateTime? dtNull)
    {
        if (dtNull.HasValue)
        {
            var dt = dtNull.Value;
            var oldDt = Game.DateTimeUTC;
            Game.DateTimeUTC = new DateTime(dt.Year, dt.Month, dt.Day, oldDt.Hour, oldDt.Minute, oldDt.Second);
            await GameChanged.InvokeAsync(Game);
        }
    }
}
