@using BettingTournament.Components.Common
@using BettingTournament.Core
@using BettingTournament.Core.Services
@inject RoundService RoundService
@inject IDialogService DialogService

<MudContainer>
    <MudDataGrid Items="@_games">
        <Columns>
            <PropertyColumn Property="x => x.HomeTeam" />
            <PropertyColumn Property="x => x.AwayTeam" />
            <PropertyColumn Property="x => x.DateTime" Format="dd.MM.yyyy HH:mm:ss" />
            <TemplateColumn>
                <CellTemplate>
                    <Button @onclick="() => UpdateClicked(context.Item)">Update</Button>
                    <Button @onclick="() => RemoveClicked(context.Item)">Remove</Button>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
    <Button OnClick="AddGameClicked">Add Game</Button>
</MudContainer>

@code{
    private IEnumerable<Game> _games = [];

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Refresh();
    }

    private async Task UpdateClicked(Game game)
    {
        var parameters = new DialogParameters<UpdateGameDialog>()
        {
            { x => x.Game , game},
        };

        var dialog = DialogService.Show<UpdateGameDialog>("", parameters);
        await dialog.Result;
        Refresh();
    }

    private void RemoveClicked(Game game)
    {
        RoundService.Remove(game.Id);
        Refresh();
    }

    private async Task AddGameClicked()
    {
        var dialog = DialogService.Show<NewGameDialog>();
        await dialog.Result;
        Refresh();
    }

    private void Refresh()
    {
        _games = RoundService.GetGames();
    }
}