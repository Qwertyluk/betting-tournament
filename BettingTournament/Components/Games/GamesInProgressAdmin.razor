@using BettingTournament.Components.Betting
@using BettingTournament.Components.Common
@using BettingTournament.Core
@using BettingTournament.Core.Models
@using BettingTournament.Core.Services
@inject GameService GameService
@inject IDialogService DialogService
@inject ScoreService ScoreService

<MudDataGrid Items="@_gamesInProgress">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Rozgrywane Gry</MudText>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.HomeTeam" Title="Druzyna A" />
        <PropertyColumn Property="x => x.AwayTeam" Title="Druzyna B" />
        <PropertyColumn Property="x => x.DateTimeCEST" Title="Data" />
        <PropertyColumn Property="x => x.HomeTeamScore" Title="Wynik Druzyna A" />
        <PropertyColumn Property="x => x.AwayTeamScore" Title="Wynik Druzyna B" />
        <TemplateColumn>
            <CellTemplate>
                <MudContainer Class="d-flex flex-column gap-1">
                    <Button OnClick="() => SetResultClicked(context.Item)">Ustaw Wynik</Button>
                    <Button Disabled="!context.Item.CanBeArchived" OnClick="() => ArchivedClicked(context.Item)">Zarchiwizuj</Button>
                    @*<Button Color="Color.Error" OnClick="() => RemoveClicked(context.Item)">Usun</Button>*@
                </MudContainer>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@code {
    private IEnumerable<ActiveGame> _gamesInProgress = [];

    [Parameter]
    public EventCallback ArchivedGamesChanged { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Refresh();
    }

    private async Task SetResultClicked(ActiveGame game)
    {
        var parameters = new DialogParameters<SetResultDialog>()
        {
            { x => x.Game , game},
        };

        var dialog = DialogService.Show<SetResultDialog>("", parameters);
        await dialog.Result;
        Refresh();
    }

    private async Task ArchivedClicked(ActiveGame game)
    {
        var dialog = DialogService.Show<ConfirmDialog>();
        var result = await dialog.Result;

        if (result.Data is bool val && val)
        {
            var archivedGame = GameService.ArchiveGame(game.Id);
            ScoreService.CalculateScoreFor(archivedGame.Id);
            Refresh();
            await ArchivedGamesChanged.InvokeAsync();
        }
    }

    private async Task RemoveClicked(ActiveGame game)
    {
        var dialog = DialogService.Show<ConfirmDialog>();
        var result = await dialog.Result;

        if (result.Data is bool val && val)
        {
            GameService.Remove(game.Id);
            Refresh();
        }
    }

    private void Refresh()
    {
        _gamesInProgress = GameService.GetGamesInProgress();
    }
}