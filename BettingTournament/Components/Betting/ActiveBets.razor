@using BettingTournament.Components.Common
@using BettingTournament.Core
@using BettingTournament.Core.Models
@using BettingTournament.Core.Services
@using BettingTournament.Data
@using BettingTournament.ViewModels
@implements IDisposable
@inject IDialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserService UserService
@inject BetService BetService

<MudDataGrid Items="@_bets" RowStyleFunc="GetRowStyle">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Gry Do Obstawienia</MudText>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="x => x.Game.HomeTeam" Title="Druzyna A" />
        <PropertyColumn Property="x => x.Game.AwayTeam" Title="Druzyna B" />
        <PropertyColumn Property="x => x.HomeTeamBet" Title="Zaklad Druzyna A" />
        <PropertyColumn Property="x => x.AwayTeamBet" Title="Zaklad Druzyna B" />
        <PropertyColumn Property="x => x.Game.RemainingTimeAsString" Title="Pozostaly czas" />
        <TemplateColumn>
            <CellTemplate>
                <Button Disabled="!context.Item.CanScoreBeUpdated" OnClick="() => BetClicked(context.Item)">Obstaw</Button>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@code {
    private IEnumerable<ActiveBet> _bets = [];
    private ApplicationUser _user = default!;
    private System.Timers.Timer _timer = new System.Timers.Timer(1000);

    protected override async void OnInitialized()
    {
        base.OnInitialized();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _user = await UserService.GetUserAsync(authState.User);

        Refresh();

        _timer.Elapsed += async (sender, e) => await RefreshData();
        _timer.Enabled = true;
    }

    private async Task BetClicked(ActiveBet bet)
    {
        var parameters = new DialogParameters<UpdateBetDialog>()
        {
            { x => x.Bet, bet },
        };
        var dialog = DialogService.Show<UpdateBetDialog>("", parameters);
        await dialog.Result;
        Refresh();
    }

    private string GetRowStyle(ActiveBet bet, int index)
    {
        if (!bet.BetPlaced)
        {
            return "background-color: lightcoral";
        }

        return "background-color: lightgreen";
    }

    // TODO optimize (refresh only data grid, not entire component)
    private async Task RefreshData()
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private void Refresh()
    {
        _bets = BetService.GetActiveBets(_user.Id);
    }

    public void Dispose()
    {
        _timer.Dispose();
    }
}