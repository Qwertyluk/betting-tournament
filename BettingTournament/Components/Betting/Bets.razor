@using BettingTournament.Components.Common
@using BettingTournament.Core
@using BettingTournament.Core.Models
@using BettingTournament.Core.Services
@using BettingTournament.Data
@using BettingTournament.ViewModels
@implements IDisposable
@inject RoundService RoundService
@inject IDialogService DialogService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserService UserService

<MudContainer>
    <MudDataGrid Items="@_bets">
        <Columns>
            <PropertyColumn Property="x => x.Game.HomeTeam" />
            <PropertyColumn Property="x => x.Game.AwayTeam" />
            <PropertyColumn Property="x => x.HomeScore" />
            <PropertyColumn Property="x => x.AwayScore" />
            <PropertyColumn Property="x => x.Game.RemainingTimeAsString" />
            <TemplateColumn>
                <CellTemplate>
                    <Button Disabled="!context.Item.CanScoreBeUpdated" OnClick="() => BetClicked(context.Item)">Bet</Button>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>
</MudContainer>

@code {
    private IEnumerable<Bet> _bets = [];
    private ApplicationUser _user = default!;
    private System.Timers.Timer _timer = new System.Timers.Timer(1000);

    protected override async void OnInitialized()
    {
        base.OnInitialized();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _user = await UserService.GetUserAsync(authState.User);

        Refresh();

        _timer.Elapsed += async (sender, e) => await RefreshData();
        _timer.Enabled = true;
    }

    private async Task BetClicked(Bet bet)
    {
        var parameters = new DialogParameters<UpdateBetDialog>()
        {
            { x => x.Bet, bet },
        };
        var dialog = DialogService.Show<UpdateBetDialog>("", parameters);
        await dialog.Result;
        Refresh();
    }

    // TODO optimize (refresh only data grid, not entire component)
    private async Task RefreshData()
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private void Refresh()
    {
        _bets = RoundService.GetBets(_user);
    }

    public void Dispose()
    {
        _timer.Dispose();
    }
}