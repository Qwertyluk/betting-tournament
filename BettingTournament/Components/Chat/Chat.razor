@using BettingTournament.Components.Common
@using BettingTournament.Core.Models
@using BettingTournament.Core.Services
@using BettingTournament.Data
@inject ChatService ChatService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserService UserService
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="chat-container">
    <div class="chat-header">
        Chat Room
    </div>
    <div id="chat-messages" class="chat-messages">
        @foreach (var message in _messages)
        {
            if(message.ApplicationUserId == _user.Id)
            {
                <div class="message sent">
                    <div class="meta">@message.ApplicationUser.UserName, @message.DateTimeCEST</div>
                    @message.Content
                </div>
            }
            else
            {
                <div class="message received">
                    <div class="meta">@message.ApplicationUser.UserName, @message.DateTimeCEST</div>
                    @message.Content
                </div>
            }
        }
    </div>
    <div class="chat-input">
        <input @bind-value="_message" type="text" placeholder="Napisz wiadomość...">
        <button @onclick="SendClicked">Wyślij</button>
    </div>
</div>

@code {
    private string _message = string.Empty;
    private IReadOnlyCollection<Message> _messages = [];
    private ApplicationUser _user = default!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _user = await UserService.GetUserAsync(authState.User);

        ChatService.OnChange += ChatServiceChanged;
        _messages = ChatService.GetMessages();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        ScrollToBottom();
    }

    private void SendClicked()
    {
        if (!string.IsNullOrEmpty(_message))
        {
            ChatService.AddMessage(_message, DateTime.UtcNow, _user);
            _message = string.Empty;
        }
    }

    private void ChatServiceChanged()
    {
        _messages = ChatService.GetMessages();
        InvokeAsync(StateHasChanged);
    }

    private void ScrollToBottom()
    {
        JSRuntime.InvokeVoidAsync("scrollToBottom", "chat-messages");
    }

    public void Dispose()
    {
        ChatService.OnChange -= ChatServiceChanged;
    }
}